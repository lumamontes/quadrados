---
import { getImagesFromFolder, getResponsiveImageUrls } from '../lib/cloudinary';
// import { getPlaiceholder } from 'plaiceholder';

interface Props {
  folderName: string;
}

const { folderName } = Astro.props;

// Fetch images from Cloudinary
const images = await getImagesFromFolder(folderName);

// Generate responsive URLs for all images
const imagesWithUrls = images.map((image) => {
  const responsiveUrls = getResponsiveImageUrls(image.public_id, image.width, image.height);
  return {
    ...image,
    responsiveUrls
  };
});
---

<div class="gallery">
  {imagesWithUrls.length > 0 ? (
    <div class="gallery-grid">
      {imagesWithUrls.map((image) => {
        const { responsiveUrls } = image;
        const aspectRatio = image.width / image.height;
        
        return (
          <a 
            href={`/image/${encodeURIComponent(image.public_id)}`}
            class="gallery-item" 
            style={`--aspect-ratio: ${aspectRatio}`}
          >
            <img
              src={responsiveUrls.medium}
              srcset={`
                ${responsiveUrls.small} 400w,
                ${responsiveUrls.medium} 800w,
                ${responsiveUrls.large} 1200w,
                ${responsiveUrls.original} ${image.width}w
              `}
              sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
              alt={`Gallery image ${image.public_id}`}
              loading="lazy"
              width={image.width}
              height={image.height}
            />
          </a>
        );
      })}
    </div>
  ) : (
    <div class="gallery-empty">
      <p> Sem imagens encontradas na galeria.</p>
      <p>Verifique a sua configuração do Cloudinary.</p>
    </div>
  )}
</div>

<style>
  .gallery {
    padding: 2rem;
    max-width: 1400px;
    margin: 0 auto;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    align-items: start;
  }

  .gallery-item {
    position: relative;
    width: 100%;
    aspect-ratio: var(--aspect-ratio);
    overflow: hidden;
    background-color: #f5f5f5;
    border: 1px solid #000000;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: block;
    text-decoration: none;
    color: inherit;
  }

  .gallery-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .gallery-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    display: block;
    transition: transform 0.3s ease;
  }

  .gallery-item:hover img {
    transform: scale(1.02);
  }

  .gallery-empty {
    text-align: center;
    padding: 4rem 2rem;
    color: #666666;
  }

  .gallery-empty p {
    margin-bottom: 1rem;
    font-size: 1.1rem;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .gallery {
      padding: 1rem;
    }
    
    .gallery-grid {
      grid-template-columns: 1fr;
      gap: 0.5rem;
    }
    
    .gallery-item {
      min-height: 200px;
    }
  }

  @media (min-width: 1200px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    }
  }
</style>
