---
import Layout from '../../layouts/Layout.astro';
import { getImagesFromFolder, getOptimizedImageUrl, getResponsiveImageUrls } from '../../lib/cloudinary';
import { config } from '../../lib/config';
// import { getPlaiceholder } from 'plaiceholder';

export async function getStaticPaths() {
  try {
    const folderName = config.cloudinary.folderName;
    console.log('Fetching images from folder:', folderName);
    
    const images = await getImagesFromFolder(folderName);
    console.log('Found images:', images.length);
    
    const paths = images.map((image) => ({
      params: { id: encodeURIComponent(image.public_id) },
      props: { image },
    }));
    
    console.log('Generated paths:', paths.length);
    return paths;
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [];
  }
}

const { image } = Astro.props;

// Check if image exists
if (!image) {
  return Astro.redirect('/404');
}

const { public_id, width, height, format, created_at } = image;

// Generate responsive URLs
const responsiveUrls = getResponsiveImageUrls(public_id, width, height);

// Generate placeholder (using a simple blur approach)
const placeholder = responsiveUrls.small;

// Extract filename from public_id
const filename = public_id.split('/').pop() || public_id;

// Format creation date
const createdDate = new Date(created_at).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Generate SEO data
const title = `${filename} - Quadrados Gallery`;
const description = `Photography by Luma - ${filename} from the Quadrados collection`;
const ogImage = responsiveUrls.large;
const canonicalUrl = new URL(`/image/${public_id}`, Astro.site);
---

<Layout 
  title={title}
  description={description}
  ogImage={ogImage}
  canonicalUrl={canonicalUrl}
>
  <div class="image-detail">
    <div class="image-container">
      <img
        src={responsiveUrls.medium}
        srcset={`
          ${responsiveUrls.small} 400w,
          ${responsiveUrls.medium} 800w,
          ${responsiveUrls.large} 1200w,
          ${responsiveUrls.original} ${width}w
        `}
        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 70vw"
        alt={`${filename} by Luma`}
        width={width}
        height={height}
        loading="eager"
      />
    </div>
    
    <div class="image-info">
      <div class="image-meta">
        <h1>{filename}</h1>
        <div class="meta-details">
          <p><strong>Formato:</strong> {format.toUpperCase()}</p>
          <p><strong>Dimensões:</strong> {width} × {height}</p>
          <p><strong>Criado:</strong> {createdDate}</p>
        </div>
      </div>
      
      <div class="image-actions">
        <a href="/" class="back-link">← Voltar</a>
        <a 
          href={responsiveUrls.original} 
          target="_blank" 
          rel="noopener noreferrer"
          class="download-link"
        >
          View Full Size
        </a>
      </div>
    </div>
  </div>
</Layout>

<style>
  .image-detail {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    min-height: calc(100vh - 80px);
  }

  .image-container {
    margin-bottom: 3rem;
    text-align: center;
  }

  .image-container img {
    max-width: 100%;
    height: auto;
    border: 1px solid #000000;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
    display: block;
  }

  .image-container img:hover {
    transform: scale(1.02);
  }

  .image-info {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: 2rem;
    align-items: start;
    border-top: 1px solid #000000;
    padding-top: 2rem;
  }

  .image-meta h1 {
    font-size: 2rem;
    font-weight: 300;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    margin-bottom: 1.5rem;
    word-break: break-all;
  }

  .meta-details p {
    margin-bottom: 0.5rem;
    font-size: 1rem;
    line-height: 1.6;
  }

  .meta-details strong {
    font-weight: 600;
  }

  .image-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: flex-end;
  }

  .back-link,
  .download-link {
    display: inline-block;
    padding: 0.8rem 1.5rem;
    border: 1px solid #000000;
    color: #000000;
    text-decoration: none;
    font-size: 0.9rem;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    transition: all 0.3s ease;
    background-color: #ffffff;
  }

  .back-link:hover,
  .download-link:hover {
    background-color: #000000;
    color: #ffffff;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .download-link {
    background-color: #000000;
    color: #ffffff;
  }

  .download-link:hover {
    background-color: #ffffff;
    color: #000000;
  }

  @media (max-width: 768px) {
    .image-detail {
      padding: 1rem;
    }
    
    .image-info {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
    
    .image-actions {
      align-items: stretch;
      flex-direction: row;
    }
    
    .back-link,
    .download-link {
      text-align: center;
      flex: 1;
    }
    
    .image-meta h1 {
      font-size: 1.5rem;
    }
  }
</style>
